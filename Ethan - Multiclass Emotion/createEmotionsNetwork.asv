function emotionsNetwork = createEmotionsNetwork()
    % Load emotions data, must be in same folder
    load("emotions_data.mat");
    
    % Transpose x and y
    x=x';
    y=y';
    
    % Create emotions network
    emotionsNetwork = newff(x, y, 10);
    
    emotionsNetwork.divideFcn = 'divideind';
    
    % Modify train parameters
    emotionsNetwork.trainParam.show = 5;
    %emotionsNetwork.trainParam.epoch = 100;
    
    % Training
    k = 10; % k in k-cross validation
    s = size(x, 2);
    testInd = (9*s)/10:s; % Last 10% is training set
    s = (9*s)/1
    
    for i = 1:k
        validInd = ((i-1)*(s/k))+1:i*(s/k); % Indicies in validation set, all else in train set
        validInd = cast(validInd, 'int32'); % Must cast to int32
        %emotionsNetwork.divideParam.valInd = validInd;
        %emotionsN  etwork.divideParam.trainInd = cast(setdiff(1:s, validInd), 'int32'); % Larger set on left of setdiff
        %emotionsNetwork.divideParam.testInd = validInd;
        emotionsNetwork.divideParam.trainInd = 1:s;
        emotionsNetwork = train(emotionsNetwork, x, y);
    end
end